//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Player1Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player1Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player1Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player1Controls"",
    ""maps"": [
        {
            ""name"": ""Player1Gameplay"",
            ""id"": ""575fd906-4893-404a-8e78-8f322bb813b1"",
            ""actions"": [
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""975f185c-b15b-41a9-b2bc-70d106758cb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""630273c3-359b-4976-862a-eacaba09dc26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""e3285619-3164-4790-804c-f35a5ec637f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4cec885-486c-4993-91fa-771e2650153a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63c2d486-7ad6-45f2-a6c0-33e4a68057dd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55ecfc05-34ce-4f91-b76f-badbd4bb629c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1Gameplay
        m_Player1Gameplay = asset.FindActionMap("Player1Gameplay", throwIfNotFound: true);
        m_Player1Gameplay_Punch = m_Player1Gameplay.FindAction("Punch", throwIfNotFound: true);
        m_Player1Gameplay_Move = m_Player1Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Player1Gameplay_Block = m_Player1Gameplay.FindAction("Block", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1Gameplay
    private readonly InputActionMap m_Player1Gameplay;
    private List<IPlayer1GameplayActions> m_Player1GameplayActionsCallbackInterfaces = new List<IPlayer1GameplayActions>();
    private readonly InputAction m_Player1Gameplay_Punch;
    private readonly InputAction m_Player1Gameplay_Move;
    private readonly InputAction m_Player1Gameplay_Block;
    public struct Player1GameplayActions
    {
        private @Player1Controls m_Wrapper;
        public Player1GameplayActions(@Player1Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Punch => m_Wrapper.m_Player1Gameplay_Punch;
        public InputAction @Move => m_Wrapper.m_Player1Gameplay_Move;
        public InputAction @Block => m_Wrapper.m_Player1Gameplay_Block;
        public InputActionMap Get() { return m_Wrapper.m_Player1Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1GameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1GameplayActionsCallbackInterfaces.Add(instance);
            @Punch.started += instance.OnPunch;
            @Punch.performed += instance.OnPunch;
            @Punch.canceled += instance.OnPunch;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Block.started += instance.OnBlock;
            @Block.performed += instance.OnBlock;
            @Block.canceled += instance.OnBlock;
        }

        private void UnregisterCallbacks(IPlayer1GameplayActions instance)
        {
            @Punch.started -= instance.OnPunch;
            @Punch.performed -= instance.OnPunch;
            @Punch.canceled -= instance.OnPunch;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Block.started -= instance.OnBlock;
            @Block.performed -= instance.OnBlock;
            @Block.canceled -= instance.OnBlock;
        }

        public void RemoveCallbacks(IPlayer1GameplayActions instance)
        {
            if (m_Wrapper.m_Player1GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1GameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1GameplayActions @Player1Gameplay => new Player1GameplayActions(this);
    public interface IPlayer1GameplayActions
    {
        void OnPunch(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
    }
}
